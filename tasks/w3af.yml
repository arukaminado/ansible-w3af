---

- name: install w3af dependencies
  package: name={{ w3af_deps_pkg }} state=present update_cache=yes
  register: pkg_result
  until: pkg_result is success

- name: git clone w3af
  git: repo=https://github.com/andresriancho/w3af.git
       dest="{{ w3af_installdir }}"
       version="{{ w3af_release }}"
       force=no
       update=no

### FIXME! next install still seems to install latest...
#- name: force uninstall some pip modules to ensure correct version
#  pip: name={{ item.p }} version={{ item.v }} state=absent
#  with_items:
#    - { p: PyOpenSSL, v: 16.1.0 }
#    - { p: lxml, v: 3.6.4 }


- include: pip-upgrade.yml
- include: python-sni-workaround.yml

# from https://github.com/andresriancho/w3af/blob/356b14b975039706f4fd7f4f5db5b114cd75f14e/w3af/core/controllers/ci/install_scripts/install_core_dependencies.sh
#- name: generate requirements.txt
#  command: >
#    python -c 'from w3af.core.controllers.dependency_check.dependency_check import dependency_check;dependency_check()'
#  args:
#    chdir: "{{ w3af_installdir }}"
#    creates: "{{ w3af_installdir }}/requirements.txt"
#  environment:
#    PYTHONPATH: "{{ w3af_installdir }}"
#  ignore_errors: true

- name: push pip requirements.txt
  template: src=requirements.txt.j2 dest={{ w3af_installdir }}/requirements.txt backup=yes

- block:
    - name: install w3af pip dependencies
      pip: requirements={{ w3af_installdir }}/requirements.txt
      register: pkg_result
      until: pkg_result is success
  when: not w3af_virtualenv

- block:
    - name: ensure virtualenv is present
      package:
        name: python-virtualenv
        state: present
      register: pkg_result
      until: pkg_result is success
    - name: install w3af pip dependencies with virtualenv
      pip:
        requirements: "{{ w3af_installdir }}/requirements.txt"
        virtualenv: "{{ w3af_virtualenv_path }}"
      register: pkg_result
      until: pkg_result is success
    - name: Ensure using virtualenv python
      replace:
        dest: "{{ item }}"
        regexp: '/usr/bin/env python'
        replace: "{{ w3af_virtualenv_path }}/bin/python"
        backup: yes
      with_items:
        - "{{ w3af_installdir }}/w3af_console"
        - "{{ w3af_installdir }}/w3af_gui"
  when: w3af_virtualenv

- name: patch w3af to work with recent pyOpenSSL
  replace:
    dest: "{{ w3af_installdir }}/w3af/core/controllers/dependency_check/requirements.py"
    regexp: "{{ item.re }}"
    replace: "{{ item.rep }}"
    backup: yes
  with_items:
    - { re: "'pyOpenSSL', '[0-9]+.[0-9]+.[0-9]+'", rep: "'pyOpenSSL', '16.2.0'" }
    - { re: "'pyasn1', '[0-9]+.[0-9]+.[0-9]+'", rep: "'pyasn1', '0.1.9'" }
    - { re: "'pyYAML', '[0-9]+.[0-9]+.[0-9]+'", rep: "'pyYAML', '3.12'" }

- name: Install retire node.js package globally
  npm:
    name: retire
    global: yes
    state: present
  register: pkg_result
  until: pkg_result is success

- name: Xenial | symlink nodejs to node
  file:
    src: /usr/bin/nodejs
    dest: /usr/bin/node
    state: link
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: add w3af install dir to path
  lineinfile:
    dest: /etc/profile.d/w3af.sh
    line: "export PATH=$PATH:{{ w3af_installdir }}"
    create: yes

- name: add owasp template script for scan
  template:
    src: w3af_owasp_script.w3af.j2
    dest: "{{ w3af_installdir }}/scripts/w3af_owasp_script.w3af"
    mode: '0644'
    backup: yes
